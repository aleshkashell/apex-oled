package main

import (
	"fmt"
	"github.com/aleshkashell/usb"
	"log"
	"strings"
)

func main() {
	hids, err := usb.Enumerate(0x1038, 0x1610)
	if err != nil {
		log.Fatal(err)
	}
	//for i := 0; i < len(hids); i++ {
	//	for j := i + 1; j < len(hids); j++ {
	//		if hids[i].Path > hids[j].Path {
	//			hids[i], hids[j] = hids[j], hids[i]
	//		}
	//	}
	//}
	for i, hid := range hids {
		fmt.Println(strings.Repeat("-", 128))
		fmt.Printf("HID #%d\n", i)
		fmt.Printf("  OS Path:      %s\n", hid.Path)
		fmt.Printf("  Vendor ID:    %#04x\n", hid.VendorID)
		fmt.Printf("  Product ID:   %#04x\n", hid.ProductID)
		fmt.Printf("  Release:      %d\n", hid.Release)
		fmt.Printf("  Serial:       %s\n", hid.Serial)
		fmt.Printf("  Manufacturer: %s\n", hid.Manufacturer)
		fmt.Printf("  Product:      %s\n", hid.Product)
		fmt.Printf("  Usage Page:   %d\n", hid.UsagePage)
		fmt.Printf("  Usage:        %d\n", hid.Usage)
		fmt.Printf("  Interface:    %d\n", hid.Interface)
		//hid.Open()
	}
	if len(hids) == 0 {
		log.Fatalf("No found device\n")
	}
	log.Printf("Opening device...")
	device, err := hids[1].Open()
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Device is opened")
	//defer device.Close()
	log.Printf("Sending data....")
	//data := []byte{0x21, 0x09, 0x03, 0x00, 0x00}
	data := []byte{0x00, 0x65,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x07, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x6e, 0x01, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x6c, 0xe1, 0x86, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x7d, 0xb1, 0x86, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x6d, 0xf1, 0x86, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x6d, 0x81, 0x86, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x6e, 0xf7, 0xff, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x1c, 0x00, 0x00, 0x00, 0xce, 0x00, 0x00, 0x03, 0x38, 0x00, 0x00, 0x00, 0x18, 0x70, 0x00, 0x00,
		0x30, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
		0x7d, 0xbb, 0xbe, 0x01, 0xf7, 0x8e, 0x00, 0xe7, 0xde, 0x39, 0xb8, 0x0f, 0x78, 0xf3, 0x80, 0x00,
		0x30, 0xee, 0xdf, 0x00, 0xc6, 0xdb, 0x01, 0xb3, 0x1b, 0x6c, 0xe8, 0x1c, 0x19, 0xb6, 0xc0, 0x00,
		0x30, 0xc6, 0xd5, 0x00, 0xc6, 0xdf, 0x01, 0xb3, 0x1b, 0x7c, 0xc0, 0x0f, 0x19, 0xb7, 0xc0, 0x00,
		0x30, 0xc6, 0xd5, 0x00, 0xd6, 0xd8, 0x01, 0xb3, 0x5b, 0x60, 0xc0, 0x03, 0x99, 0xb6, 0x00, 0x00,
		0x7d, 0xe3, 0x95, 0x00, 0x76, 0xcf, 0x00, 0xe1, 0xdb, 0x3d, 0xe0, 0x1f, 0x7e, 0xfb, 0xc0, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x31, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x3b, 0x63, 0xc0, 0x3c, 0xef, 0x8e, 0x01, 0xf3, 0x9d, 0xfc, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x6d, 0xb6, 0xc0, 0x71, 0xb7, 0xdb, 0x00, 0xc6, 0xcf, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x3d, 0xb6, 0xc0, 0x3d, 0xb5, 0x5f, 0x00, 0xc7, 0xc6, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x6d, 0xb6, 0xc0, 0x0f, 0xb5, 0x58, 0x00, 0xde, 0x0f, 0x36, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x7d, 0xb3, 0xe0, 0x7c, 0xe5, 0x4f, 0x00, 0x73, 0xdb, 0x9d, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
	//for i := 0; i < 87; i++ {
	//	data = append(data, 0x00)
	//}
	result, err := device.Write(data)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("Result %d\n", result)
	log.Printf("Data is sent")
	log.Printf("Closing device....")
	err = device.Close()
	if err != nil {
		log.Fatalf("Close error %s", err)
	}
	log.Printf("Device is closed")
	fmt.Println(strings.Repeat("=", 128))
}
